#+TITLE: Bearguns Emacs
#+STARTUP: content
#+PROPERTY: header-args :emacs-lisp :tangle ./init.el

[[./logo-sm.jpg]]

* Introduction
** Why Emacs?
The short version? I just like it. There's something familiar and
unfamiliar about Emacs that I find appealing. It's not too hard to get
in and start editing files, but the skill ceiling is very high. The
limit to what you can do with and within Emacs seems non-existent. I
was a stubborn vimmer for a few years, before Spacemacs led me to
Doom which led me to roll my own configuration.

** Why not [EMACS_DISTRIBUTION]?
As someone with an obsessive engineer brain, I don't like not knowing
how things work or what they're doing. Writing my own "vanilla" Emacs
configuration helps me learn more about Elisp, the various packages I
use, and Emacs itself. It helps me escape the VS Code syndrome, where
every keystroke seems to do /something/, but I'm not always sure what,
why, when, how, or worse - how to configure or remove behavior I don't
like.

** Why a literate config?
- It's cool
- It's fun
- It's declarative
- It might just help someone else somewhere learn more about Emacs
- It's cool

** Can I copy this configuration?
Sure! There are more than likely features and settings in this file
that are specific to my system(s), but this is a great place to start
learning about configuring Emacs to be your very own lifelong editor.

* Startup
** early-init.el
[[https://luca.cambiaghi.me/vanilla-emacs/readme.html#h:D9ED3ADB-810A-4A1C-A1D3-5397874AFAC7][Thanks to Luca Cambiaghi for a lot of this section]]

#+BEGIN_SRC emacs-lisp :tangle  ./early-init.el
;; Hide UI elements early, don't flash vanilla Emacs at me
;; and make me think something's broken.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(verical-scroll-bars) default-frame-alist)

;; Don't resize the frame at startup when rendering fonts.
(setq frame-inhibit-implied-resize t)

;; Now hide the default chrome
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen 1)
(setq use-file-dialog nil)
#+END_SRC

* Package Management
** Use-Package
#+BEGIN_SRC emacs-lisp
  ;; Initialize package sources
  (require 'package)
  (add-to-list 'package-archives
         '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
             '("GNU ELPA" . "https://elpa.gnu.org/packages/"))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  ;; (use-package auto-package-update
  ;;   :custom
  ;;   (auto-package-update-interval 7)
  ;;   (auto-package-update-prompt-before-update t)
  ;;   (auto-package-update-hide-results t)
  ;;   :config
  ;;   (auto-package-update-maybe)
  ;;   (auto-package-update-at-time "09:00"))
#+END_SRC
* Defaults
** No Littering!
#+BEGIN_SRC emacs-lisp
;; NOTE: If you want to move everything out of the ~/.emacs.d folder
;; reliably, set `user-emacs-directory` before loading no-littering!
;(setq user-emacs-directory "~/.cache/emacs")

(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

** Emacs Defaults
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    (setq inhibit-startup-screen t
          initial-scratch-message nil
          sentence-end-double-space nil
          ring-bell-function 'ignore
          frame-resize-pixelwise t)
    (setq user-full-name "Sean Brage"
          user-mail-address "seanmbrage@me.com")


    ;; utf-8 please and thanks
    (set-charset-priority 'unicode)
    (setq locale-coding-system 'utf-8
          coding-system-for-read 'utf-8
          coding-system-for-write 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

    ;; Recent files -- yay!
    (recentf-mode t)
    (setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
                            ,(expand-file-name "eln-cache/" user-emacs-directory)
                            ,(expand-file-name "etc/" user-emacs-directory)
                            ,(expand-file-name "var/")))

    ;; Don't keep a custom file, this just messes things up especially with VC
    (setq custom-safe-themes t)
    (setq enable-local-variables :all)

    ;; follow symlinks
    (setq vc-follow-symlinks t)

    ;; clean UI
    (when (window-system)
      (tool-bar-mode -1)
      (toggle-scroll-bar -1))

    ;; winner mode for window layout management (YES)
    (winner-mode t)

    ;; highlight matching parens
    (show-paren-mode t)

    ;; autopairs
    (electric-pair-mode +1)

    ;; sshh
    (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

    ;; cleanup modeline
    (display-time-mode -1)
    (setq column-number-mode t)
    (setq line-number-mode t)

    ;; do some indentation normalization
    (setq-default tab-width 2)
    (setq-default indent-tabs-mode nil)
    (setq-default tab-always-indent 'complete)
    (electric-indent-mode 1)

    ;; (global-display-line-numbers-mode 1)
    ;; (add-hook 'prog-mode-hook (lambda () 
    ;;   (setq display-line-numbers-type 'relative)))

    (if (> (display-pixel-width) 2560)
      (set-frame-font "JetBrains Mono-15")
      (set-frame-font "JetBrains Mono-12"))
  )
#+END_SRC

** Mac-specific Configuration
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta)
    (setq mac-control-modifier 'control)))

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :hook (emacs-startup . (lambda ()
                           (setq exec-path-from-shell-arguments '("-l"))
                           (exec-path-from-shell-initialize))))

(use-package emacs
  :init
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)
)
#+END_SRC

#+END_SRC

* Keybindings & Editing
** General
#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :config 
    (general-evil-setup)

    (general-create-definer bg/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer bg/local-leader-keys
      :states '(normal visual)
      :keymaps 'override
      :prefix ","
      :global-prefix "SPC m")

     (bg/leader-keys
       "SPC" '(execute-extended-command :which-key "execute command")
       "b" '(:ignore t :which-key "buffer")
       "bb" 'ivy-switch-buffer
       "br" 'revert-buffer
       "bd" 'kill-current-buffer
       "bn" 'next-buffer
       "bp" 'previous-buffer

       "c" '(:ignore t :which-key "code")
       "d" '(:ignore t :whick-key "dired")
       "dd" 'dired
       "f" '(:ignore t :which-key "file")
       "ff" 'find-file
       "fs" 'save-buffer
       "fr" 'recentf-open-files

       "p" '(:ignore t :which-key "project")
       "pp" 'project-switch-project
       "pf" 'project-find-file
       "pg" 'project-find-regexp

       "w" '(:ignore t :whick-key "window")
       "wl" 'windmove-right
       "wh" 'windmove-left
       "wj" 'windmove-down
       "wk" 'windmove-up
       "wr" 'winner-redo
       "wd" 'delete-window
       "w3" 'split-window-right
       "w2" 'split-window-below
       "w=" 'balance-windows-area
       "wD" 'kill-buffer-and-window
       "wu" 'winner-undo
       "wr" 'winner-redo
       "wm" '(delete-other-windows :wk "maximize")

       "l" '(:ignore t :which-key "lsp")
       "gd" 'lsp-goto-type-definition
       "gi" 'lsp-goto-implementation))
#+END_SRC

** EVIL
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :demand
    :general
    (lc/leader-keys
     "wv" 'evil-window-vsplit
     "ws" 'evil-window-split)
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-fu)
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    (setq evil-auto-indent nil) ;; electric-indent-mode handles this just fine
    :config
    (setq-default display-line-numbers 'relative)
    (evil-mode 1))

  (use-package evil-escape
    :demand
    :init (setq-default evil-escape-key-sequence "jk")
    :config (evil-escape-mode 1))

  ;; ;; (use-package evil-collection
  ;; ;;   :after evil
  ;; ;;   :demand
  ;; ;;   :init (setq evil-collection-magit-use-z-for-folds nil)
  ;; ;;   :config (evil-collection-init))

  ;; (use-package evil-goggles
  ;;    :after evil
  ;;    :demand
  ;;    :init (setq evil-goggles-duration 0.05)
  ;;    :config
  ;;    (push '(evil-operator-eval
  ;;       :face evil-goggles-yank-face
  ;;       :switch evil-goggles-enable-yank
  ;;       :advice evil-goggles--generic-async-advice)
  ;;       evil-goggles--commands)
  ;;    (evil-goggles-mode)
  ;;    (evil-goggles-use-diff-faces))

  (use-package evil-surround
    :general
    (:states 'operator
             "s" 'evil-surround-edit
             "S" 'evil-Surround-edit)
    (:states 'visual
             "S" 'evil-surround-region
             "gS" 'evil-Surround-region))
#+END_SRC

** Which-Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :demand t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config (which-key-mode))
#+END_SRC

** Hydra
Emacs Hydra is a package for creating hydras - extensible, custom key chords.
#+BEGIN_SRC emacs-lisp
  ;; (use-package hydra
  ;;   :config
  ;;   (defhydra hydra-file (global-map "C-c f")
  ;;     "files"
  ;;     ("f" find-file)
  ;;     ("r" recentf-open-files)
  ;;     ("s" save-buffer))
  ;;   (defhydra hydra-buffer (global-map "C-c b")
  ;;     "files"
  ;;     ("n" next-buffer)
  ;;     ("p" previous-buffer)
  ;;     ("k" kill-buffer)
  ;;     ("b" list-buffers))
  ;;   (defhydra hydra-project (global-map "C-c p")
  ;;     "projects"
  ;;     ("p" project-switch-project)
  ;;     ("f" project-find-file)
  ;;     ("g" project-find-regexp)))
#+END_SRC
* UI Config
** UI Themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config (load-theme 'doom-spacegrey t))
#+END_SRC
** Modeline
The modeline appears at the bottom of every Emacs window, and is full of helpful information.
There are a packages that can improve the display of the modeline, like doom-modeline.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :demand
  :init
  (setq doom-modeline-height 30)
  (setq doom-modeline-icon (display-graphic-p))
  (setq doom-modeline-major-mode-icon t)
  (doom-modeline-mode 1))
#+END_SRC
** All the Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
;; it's all the icons

(unless (member "all-the-icons" (font-family-list))
    (all-the-icons-install-fonts t))
;; Install...well, all of the fonts for all-the-icons
#+END_SRC

** Rainbows
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
    :mode "\\.pco\\'"
    :hook ((prog-mode . rainbow-delimiters-mode)
              (conf-mode . rainbow-delimiters-mode)))
;; colorize nested brackets and parens, helpful to determine scope
#+END_SRC

* Core Packages
** Project
Emacs built-in project management package. It rocks.
#+BEGIN_SRC emacs-lisp
(require 'project)
#+END_SRC
** YA Snippet
Configurable snippet expansion for common text snippets.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
    :bind (("C-," . yas-expand))
    :config (yas-global-mode))
;; snippets for expanding common code blocks etc.
#+END_SRC
** Expand Region
Helpful for quickly selecting with parens, brackets, etc.
#+BEGIN_SRC emacs-lisp
(use-package expand-region
    :config (global-set-key (kbd "C-;") 'er/expand-region))
#+END_SRC emacs-lisp
** Ivy + Counsel
2 packages that improve Emacs auto-completion framework.
#+BEGIN_SRC emacs-lisp
(use-package ivy
    :init (setq ivy-use-virtual-buffers t)
    :config
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (ivy-mode 1))
;; replace Emacs' built-in completion engine with something a bit more...great.

(use-package counsel
    :config
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "\C-s") 'swiper)
    (counsel-mode 1))
;; find stuff!
#+END_SRC

** Company
Auto-completion frontend
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook ((prog-mode . company-mode)
           (conf-mode . company-mode)
           (web-mode  . company-mode))
    :init
    (setq-default company-tooltip-align-annotations t)
    :config
    (setq company-idle-delay 0.15
          company-minimum-prefix-length 2)
    (setq company-tooltip-limit 15)
    (setq company-show-numbers t)
    (setq company-require-match nil)
    (setq company-selection-wrap-around t)
    (setq company-dabbrev-ignore-case t)
    (setq company-dabbrev-downcase nil))
    ;; awesome auto-completion

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
    :config
    (setq magit-refresh-status-buffer nil)
    (global-set-key (kbd "C-x g") 'magit))
;; oh baby. git has never been this fun to use.
#+END_SRC

* Programming
** LSP
LSP is an intellisense-like protocol providing IDE features to any editor capable of talking to a language server.
#+BEGIN_SRC emacs-lisp
  (defun bg/lsp-mode-setup ()
    (setq lsp-diagnostic-package 'flymake))

  ;; (defun bg/setup-lsp-company()
  ;;   (setq-local company-backends
  ;;               '(company-capf company-dabbrev company-dabbrev-code)))

  ;; (use
  (use-package lsp-mode
      :init
      (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
      :commands (lsp lsp-deferred)
      :hook ((typescript-mode . lsp)
                     (js-mode . lsp))
      :config
      (setq-default lsp-eslint-enabled nil)
      (lsp-enable-which-key-integration t))
#+END_SRC
** General Programming Configuration
#+BEGIN_SRC emacs-lisp
  (use-package add-node-modules-path
    :hook (
           (bg-vue-mode . add-node-modules-path)
           (js-mode . add-node-modules-path)
           (typescript-mode . add-node-modules-path)))

  (use-package editorconfig
    :config (editorconfig-mode 1))
  ;; ensure editor settings are consistent between developers

  ;; (use-package flycheck
  ;;   :hook ((prog-mode . flycheck-mode)
  ;;          (conf-mode . flycheck-mode)
  ;;          (web-mode  . flycheck-mode)
  ;;          (css-mode  . flycheck-mode))
  ;;   :config
  ;;   (add-to-list 'flycheck-enabled-checkers 'javascript-eslint)
  ;;   (setq-default flycheck-emacs-lisp-load-path 'inherit)
  ;;   (setq-default flycheck-highlighting-mode 'lines))
  ;; ;; check syntax!
#+END_SRC
** VueJS
#+BEGIN_SRC emacs-lisp
  (defun bg-vue-mode-setup ()
    (superword-mode)
    (lsp)
    (subword-mode)
    (setq web-mode-script-padding 0)
    (setq web-mode-style-padding 0)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2))

  (define-derived-mode bg-vue-mode web-mode "bg-vue-mode"
    "Major mode derived from web-mode, tailored for VueJS development")
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . bg-vue-mode))
  (add-hook 'bg-vue-mode-hook #'add-node-modules-path)
  (add-hook 'bg-vue-mode-hook #'bg-vue-mode-setup)
  ;; configuration to make web-mode play better with .vue files

  (use-package web-mode
    :mode (("\\.html\\'" . web-mode)
           ("\\.hbs\\'" . web-mode)
           ("\\.erb\\'" . web-mode)))
  ;; all the html, hbs, ejs, erb, vue, etc.

  (use-package prettier
    :hook ((bg-vue-mode . prettier-mode)
           (typescript-mode . prettier-mode)
           (js-mode . prettier-mode)))

  (use-package emmet-mode
    :hook web-mode)
  ;; expand html elements

  (use-package json-mode
    :mode "\\.json\\'")

  (use-package scss-mode
    :mode "\\.scss\\'")
  ;; make sass more better

  (use-package go-mode
    :mode "\\.go\\'")

  (use-package yaml-mode
    :mode "\\.yml\\'")

  (use-package markdown-mode
    :mode (("\\.markdown\\'" . markdown-mode)
           ("\\.md\\'" . markdown-mode)))
#+END_SRC

** TypeScript
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'")
#+END_SRC

